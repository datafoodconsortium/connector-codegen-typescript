[comment encoding = UTF-8 /]
[module generateClass('http://www.eclipse.org/uml2/5.0.0/UML')]

[import org::datafoodconsortium::connector::codegen::typescript::common /]
[import org::datafoodconsortium::connector::codegen::typescript::commonTypescript /]
[import org::datafoodconsortium::connector::codegen::typescript::generateOperation /]
[import org::datafoodconsortium::connector::codegen::typescript::generatePackageImport /]

[template public generateClass(aClass : Class)]
[file (aClass.name.concat('.ts'), false, 'UTF-8')]
[generateImports(aClass)/][generateRealizedInterfacesImports(aClass)/]

export default [if (aClass.isAbstract)]abstract [/if]class [aClass.name.toUpperFirst()/] [generateGeneralization(aClass)/][generateInterfaceRealizationHeader(aClass)/]{

	[for (property: Property | aClass.ownedAttribute)]
	private [property.name/]: [generateType(property)/];
	[/for]

	[for (operation: Operation | aClass.ownedOperation) separator('\n')]
	[generateOperationImplementation(aClass, operation)/]
	[/for]

	[if not (aClass.interfaceRealization->isEmpty())]
	[for (interface: Interface | aClass.getAllImplementedInterfaces()->select(i: Interface | aClass.generalization->asSequence()->at(1).general.allRealizedInterfaces()->excludes(i)))]
		[for (operation: Operation | interface.getOperations()->select(o: Operation | aClass.ownedOperation->excludesAll(aClass.ownedOperation->select(op: Operation | op.isAbstract and o.name = op.name)))) separator ('\n')]
	[generateOperationImplementation(aClass, operation)/]
		[/for]
	[/for]
	[/if]

}
[/file]
[/template]

[template public generateInterfaceRealizationHeader(aClass: Class)]
[if not (aClass.interfaceRealization->isEmpty())]implements [for (interface: InterfaceRealization | aClass.interfaceRealization) separator(', ')][interface.contract.name/][/for] [/if]
[/template]
