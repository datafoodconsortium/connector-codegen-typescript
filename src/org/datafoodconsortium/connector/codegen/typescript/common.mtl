[comment encoding = UTF-8 /]
[module common('http://www.eclipse.org/uml2/5.0.0/UML')/]

[query public createGeneralization(aClass: Class): Boolean
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'createGeneralization(org.eclipse.uml2.uml.Class)', Sequence{aClass})
/]

[query public getTypeName(aType: Type) : String
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getTypeName(org.eclipse.uml2.uml.Type)', Sequence{aType})
/]

[query public isConstructor(o: Operation): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isConstructor(org.eclipse.uml2.uml.Operation)', Sequence{o})
/]

[query public isInitializer(p: Parameter): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isInitializer(org.eclipse.uml2.uml.Parameter)', Sequence{p})
/]

[query public isInitializerParent(p: Parameter): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isInitializerParent(org.eclipse.uml2.uml.Parameter)', Sequence{p})
/]

[query public isGetter(o: Operation): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isGetter(org.eclipse.uml2.uml.Operation)', Sequence{o})
/]

[query public isPropertyMultiple(p: Property): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isPropertyMultiple(org.eclipse.uml2.uml.Property)', Sequence{p})
/]

[query public isSetter(o: Operation): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isSetter(org.eclipse.uml2.uml.Operation)', Sequence{o})
/]

[query public isAdder(o: Operation): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isAdder(org.eclipse.uml2.uml.Operation)', Sequence{o})
/]

[query public isRemover(o: Operation): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isRemover(org.eclipse.uml2.uml.Operation)', Sequence{o})
/]

[query public isSemantic(e: Element): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isSemantic(org.eclipse.uml2.uml.Element)', Sequence{e})
/]

[query public isBlankNode(e: Element): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isBlankNode(org.eclipse.uml2.uml.Element)', Sequence{e})
/]

[query public isExternal(e: Element): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isExternal(org.eclipse.uml2.uml.Element)', Sequence{e})
/]

[query public isPrimitive(t: Type): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'isPrimitive(org.eclipse.uml2.uml.Type)', Sequence{t})
/]

[query public hasStereotype(e: Element, s: String): Boolean 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'hasStereotype(org.eclipse.uml2.uml.Element, java.lang.String)', Sequence{e, s})
/]

[query public getAttributeForStereotypedOperation(c: Class, s: String, o: String): String 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getAttributeForStereotypedOperation(org.eclipse.uml2.uml.Class, java.lang.String, java.lang.String)', Sequence{c, s, o})
/]

[query public getConstructorUninitializedAttributes(o: Operation): Sequence(Property)
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getConstructorUninitializedAttributes(org.eclipse.uml2.uml.Operation)', Sequence{o})
/]

[query public getConstructor(c: Class, o: Operation): String 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getConstructor(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Operation)', Sequence{c, o})
/]

[query public getGetter(c: Class, o: Operation): String 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getGetter(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Operation)', Sequence{c, o})
/]

[query public getPropertyOfAdder(c: Class, o: Operation): Property 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getPropertyOfAdder(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Operation)', Sequence{c, o})
/]

[query public getPropertyOfGetter(c: Class, o: Operation): Property 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getPropertyOfGetter(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Operation)', Sequence{c, o})
/]

[query public getPropertyOfSetter(c: Class, o: Operation): Property 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getPropertyOfSetter(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Operation)', Sequence{c, o})
/]

[query public getSetter(c: Class, o: Operation): String 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getSetter(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Operation)', Sequence{c, o})
/]

[query public getSetter(p: Parameter): Operation 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getSetter(org.eclipse.uml2.uml.Parameter)', Sequence{p})
/]

[query public getAdder(c: Class, o: Operation): String 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getAdder(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Operation)', Sequence{c, o})
/]

[query public getAdder(p: Parameter): Operation 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getAdder(org.eclipse.uml2.uml.Parameter)', Sequence{p})
/]

[query public getRemover(c: Class, o: Operation): String 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getRemover(org.eclipse.uml2.uml.Class, org.eclipse.uml2.uml.Operation)', Sequence{c, o})
/]

[query public getGetter(p: Property): String 
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getGetter(org.eclipse.uml2.uml.Property)', Sequence{p})
/]

[query public getUnimplementedOperations(c: Classifier): Sequence(Operation)
	= invoke('org.datafoodconsortium.connector.codegen.common.Common', 'getUnimplementedOperations(org.eclipse.uml2.uml.Classifier)', Sequence{c})
/]

[template public generateType(p: Property)][if not (p.type.isPrimitive())]([/if][p.type.getTypeName()/][if not (p.type.isPrimitive())] & Semanticable)[if (p.lower = 0 and p.upper = 1)] | undefined[/if][/if][if (p.upper = -1)]['[ fdf d ]'/] | ['[]'/][/if][/template]

[template public generateType(name: String, upper: Integer)][if (name = 'String')]string[elseif (name = 'Real' or name = 'Integer' )]number[elseif (name = 'Boolean')]boolean[else]([name/] & Semanticable)[/if][if (upper = 1)][elseif (upper = -1)]['[]'/][/if][/template]
